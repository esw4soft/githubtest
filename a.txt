
git init 啟動git
ls -a    查看所有包含隱藏的資料

git config --global user.name 使用者名稱
git config --global user.email 使用者信箱
git config user.name 查看使用者名稱
git config user.email 查看使用者信箱

git status 查看目前狀態
git log 查看commit紀錄
git diff 查看上版跟目前版修改紀錄

git add 檔案名稱
git add . 全部檔案加入
git commit-m 自取名稱

git reset --hard HEAD~3
git reset --hard HEAD~2
git reset --hard HEAD~1 最新的上一個版本
git reset --hard HEAD   目前版本

git branch
git branch 分支名稱
git checkout 名稱  跳轉到指定commit地點

git merge 分支名稱 (master端)
git commit -am 名稱      -am:(全部一起commit)

branch123123merge

20211018
將分支拉到主線
git rebase 名稱 (branch) 
branch移動指令:
git branch -f 名稱 移動位置

通常推到remote端會用revert
反著再做一次
git revert HEAD

使用cherry-pick <> 互動式rebase 可能用到 文字編輯器core.editor 所以先加上設定：
git config --global core.editor $(which vim)

把某一點的commit剪取到某個位置的commit 
git cherry-pick 某個commit 某個commit2
ex:當develop已經開到很後面 ,而master還沒上線，但需要develop裡的某個commit點上線,就可以用cherry-pick
在master使用cherry-pick某一commit,就可把某功能加入上線版本

git分支策略
可以把測試的東西跟debug修正的東西分開來,修正完在合回去,commit點可以分 debug點,console點,修正點

git commit --amend
在原本的點上上繼續走 不會多漲一個commit

Merge回復上一動
Git reset —hard ORIG_HEAD

rename local branch & remote branch
git branch -m {old branch_name} {new branch_name}
git push origin {new_branch_name} :{old_branch_name}
